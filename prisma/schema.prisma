generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider            = "mysql"
  url                 = env("DATABASE_URL")
  shadowDatabaseUrl   = env("SHADOW_DATABASE_URL")
}

model RequestLeave {
  id           Int             @id @default(autoincrement())
  user_id      Int
  reason       String          @db.LongText
  started_date DateTime
  ended_date   DateTime
  url_proof    String?
  status       EnumLeaveStatus @default(pending)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  deleted_at   DateTime?

  @@map("request_leaves")
}

enum EnumLeaveStatus {
  pending
  approved_lead
  approved_hr
  reject
}

model RequestReimburses {
  id          Int                         @id @default(autoincrement())
  user_id     Int
  description String                      @db.LongText
  type        EnumReimbursesType
  nominal     BigInt
  url_proof   String?
  status      EnumReimbursesStatus        @default(pending)
  created_at  DateTime                    @default(now())
  updated_at  DateTime                    @updatedAt
  deleted_at  DateTime?

  @@map("request_reimburses")
}

enum EnumReimbursesType {
  travel
  business
  healthcare
  tax
  others
}

enum EnumReimbursesStatus {
  pending
  approved_lead
  approved_hr
  reject
}

model Attendance {
  id          Int           @id @default(autoincrement())
  user_id     Int
  is_checkout Boolean
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?

  @@map("attendances")
}

model Target {
  id          Int           @id @default(autoincrement())
  user_id     Int
  product     String
  quantity    Int
  ended_date  DateTime
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?

  @@map("targets")
}

model Targets {
  id            Int               @id @default(autoincrement())
  targetReports Target_Report[]
}

model Target_Report {
  id          Int           @id @default(autoincrement())
  user_id     Int
  target      Targets       @relation(fields: [target_id], references: [id])
  target_id   Int
  status      EnumTargerReportStatus  @default(pending)
  url_proof   String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?

  @@map("target_reports")
}

enum EnumTargerReportStatus {
  pending
  approved_lead
  approved_hr
  reject
}